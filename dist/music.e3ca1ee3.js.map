{"mappings":"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","sources":["public/music.js"],"sourcesContent":["//add event listener listening for document ready (onload)\r\nconst playlistCovers = document.getElementsByClassName('playlistCover');\r\nconst playlistNameArray = document.getElementsByClassName(\"playlistName\");\r\nconst audio = document.getElementById(\"audio\");\r\nconst statusIcon = document.getElementById(\"statusIcon\");\r\n\r\n\r\nconst songIndex = 0;\r\n\r\n\r\nclass playlist {\r\n  constructor(playlistName, tracklist) {\r\n    this.playlistName = playlistName;\r\n    this.tracklist = tracklist;\r\n  }\r\n}\r\n\r\nlet hogwartsPlaylist = new playlist(\"Hogwarts Ambience\", [\"Hedwig's Theme.mp3\"]);\r\nlet bardcorePlaylist = new playlist(\"Bardcore\", [\"Never Gonna Give You Up (Medieval Cover).mp3\"]);\r\nlet studioGhibli = new playlist(\"Studio Ghibli OST\", [\"A town with an ocean view.mp3\"]);\r\nlet witcherAmbience = new playlist(\"The Witcher III\", [\"Kaer Morhen.mp3\"]);\r\nlet rain = new playlist(\"Rain Sounds\", [\"rain sounds.mp3\"]);\r\nlet lofi = new playlist(\"Lofi\", [\"Forest Lullaby.mp3\"]);\r\nlet fireplace = new playlist(\"Fireplace\", [\"Fireplace.mp3\"])\r\n\r\nlet playlists = [hogwartsPlaylist, bardcorePlaylist, rain, studioGhibli, witcherAmbience, lofi, fireplace];\r\n\r\n\r\n\r\nfunction loadPlaylist(playlistName) {\r\n  //update song name, \r\n  let playlistStatusIcon = playlistName.firstElementChild;\r\n  for (let y = 0; y < playlists.length; y++) {\r\n    if (playlistName.innerText == playlists[y].playlistName) {\r\n      let songToPlay = playlists[y].tracklist[0];\r\n      playSong(songToPlay, playlistStatusIcon);\r\n    }\r\n  }\r\n} \r\n\r\n\r\nfor (let x = 0; x < playlistCovers.length; x++) {\r\n  playlistCovers[x].addEventListener(\"click\", () => {\r\n    console.log(\"click is being detected\");\r\n\r\n    //get playlist cover's h3 (the playlists name, then pass that into load playlist function)\r\n    \r\n    let playlistName = playlistCovers[x].firstElementChild;\r\n    console.log(playlistName);\r\n    //console.log(firstChild);\r\n    //let playlistAudio = playlistCovers[x].childNodes[1];\r\n\r\n    const isPlaying = audio.classList.contains(\"playing\");\r\n    if (isPlaying) {\r\n      pauseSong(playlistName.firstElementChild);\r\n    }\r\n    else {\r\n      loadPlaylist(playlistName);\r\n    }\r\n  })\r\n}\r\n\r\n\r\nfunction playSong(songToPlay, statusIcon) {\r\n  \r\n  audio.classList.add(\"playing\");\r\n  statusIcon.classList.replace(\"playButtonActive\", \"pauseButtonActive\");\r\n  statusIcon.src = \"icons/pause.svg\";\r\n  audio.src = \"songs/\" + songToPlay;\r\n  audio.play();\r\n}\r\n\r\n\r\n\r\nfunction pauseSong(statusIcon) {\r\n  audio.classList.remove(\"playing\");\r\n  statusIcon.classList.replace(\"pauseButtonActive\", \"playButtonActive\");\r\n  statusIcon.src = \"icons/play.svg\";\r\n  audio.pause();\r\n}\r\n\r\n//TODO - if one playlist is clicked, then another, the previously playing one will automatically stop\r\n\r\n\r\n\r\n//find out which playlist has been clicked (hogwarts, bardcore, etc)\r\n\r\n//if song ends, change icon back to play\r\n\r\n//store songs for each playlist in specific arrays, and play them when that playlist has been selected\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nATTEMPTED FIXES for pathing issues when changing the src for a song. \r\nThis is an issue with my server that I cant seem to get right as any song that is dynamically added via the dom leads back to my index.html and isnt actually an mp3 file.\r\n\r\n//add event listener listening for document ready (onload)\r\nconst playlistCovers = document.getElementsByClassName('playlistCover');\r\nconst playlistNameArray = document.getElementsByClassName(\"playlistName\");\r\nconst audio = document.getElementById(\"audio\");\r\nconst statusIcon = document.getElementById(\"statusIcon\");\r\nconst audioSource = document.getElementById(\"audioSource\");\r\nconst button = document.getElementById(\"button\");\r\n\r\n\r\nbutton.addEventListener(\"click\", () => {\r\n    localStorage.setItem(\"song\", \"songs/A town with an ocean view.mp3\");\r\n    var song = localStorage.getItem(\"song\");\r\n    song.play();\r\n    /*\r\n    console.log(audioSource.src);\r\n    audioSource.src = \"songs/Fireplace.mp3\";\r\n    audioSource.load();\r\n    console.log(audioSource.src);\r\n\r\n    audioSource.play();\r\n//    fetchAudioAndPlay();\r\n\r\n})\r\n\r\nfunction fetchAudioAndPlay() {\r\n    fetch(audioSource.src)\r\n    .then(response => response.blob())\r\n    .then(blob => {\r\n      audioSource.srcObject = blob;\r\n      return audioSource.play();\r\n    })\r\n    .then(_ => {\r\n      console.log(\"audio playback started\");\r\n    })\r\n    .catch(e => {\r\n        console.log(\"audio playback failed\");\r\n        // Video playback failed ;(\r\n    })\r\n  }    \r\n    //let playPromise = audioSource.play();\r\n\r\n\r\n\r\n\r\n\r\nconst songIndex = 0;\r\n\r\n\r\nclass playlist {\r\n  constructor(playlistName, tracklist) {\r\n    this.playlistName = playlistName;\r\n    this.tracklist = tracklist;\r\n  }\r\n}\r\n\r\nlet hogwartsPlaylist = new playlist(\"Hogwarts Ambience\", [\"Hedwig's Theme.mp3\"]);\r\nlet bardcorePlaylist = new playlist(\"Bardcore\", [\"Never Gonna Give You Up (Medieval Cover).mp3\"]);\r\nlet studioGhibli = new playlist(\"Studio Ghibli OST\", [\"A town with an ocean view.mp3\"]);\r\nlet witcherAmbience = new playlist(\"The Witcher III\", [\"Kaer Morhen.mp3\"]);\r\nlet rain = new playlist(\"Rain Sounds\", [\"rain sounds.mp3\"]);\r\nlet lofi = new playlist(\"Lofi\", [\"Forest Lullaby.mp3\"]);\r\nlet fireplace = new playlist(\"Fireplace\", [\"Fireplace.mp3\"])\r\n\r\nlet playlists = [hogwartsPlaylist, bardcorePlaylist, rain, studioGhibli, witcherAmbience, lofi, fireplace];\r\n\r\n\r\n\r\nfunction loadPlaylist(playlistName) {\r\n  //update song name, \r\n  let playlistStatusIcon = playlistName.firstElementChild;\r\n  for (let y = 0; y < playlists.length; y++) {\r\n    if (playlistName.innerText == playlists[y].playlistName) {\r\n      let songToPlay = playlists[y].tracklist[0];\r\n      playSong(songToPlay, playlistStatusIcon);\r\n    }\r\n  }\r\n} \r\n\r\n\r\nfor (let x = 0; x < playlistCovers.length; x++) {\r\n  playlistCovers[x].addEventListener(\"click\", () => {\r\n    console.log(\"click is being detected\");\r\n    \r\n    //get playlist cover's h3 (the playlists name, then pass that into load playlist function)\r\n    \r\n    let playlistName = playlistCovers[x].firstElementChild;\r\n    console.log(playlistName);\r\n    //console.log(firstChild);\r\n    //let playlistAudio = playlistCovers[x].childNodes[1];\r\n\r\n    const isPlaying = audio.classList.contains(\"playing\");\r\n    if (isPlaying) {\r\n      pauseSong(playlistName.firstElementChild);\r\n    }\r\n    else {\r\n      loadPlaylist(playlistName);\r\n    }\r\n  })\r\n}\r\n\r\n\r\nfunction playSong(songToPlay, statusIcon) {\r\n  \r\n  audio.classList.add(\"playing\");\r\n  statusIcon.classList.replace(\"playButtonActive\", \"pauseButtonActive\");\r\n  statusIcon.src = \"icons/pause.svg\";\r\n  audio.src = \"songs/\" + songToPlay;\r\n  audio.src = songToPlay;\r\n  console.log(\"song to play is \" + audio.src);\r\n  //audio.load();\r\n  var playPromise = audio.play();\r\n\r\n\r\n  if (playPromise !== undefined) {\r\n    playPromise.then(function() {\r\n      // Automatic playback started!\r\n      console.log(\"playback started\");\r\n    }).catch(function(error) {\r\n        console.log(\"playback failed\" + error);\r\n      // Automatic playback failed.\r\n      // Show a UI element to let the user manually start playback.\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction pauseSong(statusIcon) {\r\n  audio.classList.remove(\"playing\");\r\n  statusIcon.classList.replace(\"pauseButtonActive\", \"playButtonActive\");\r\n  statusIcon.src = \"icons/play.svg\";\r\n  audio.pause();\r\n}\r\n\r\n\r\n\r\n*/"],"names":[],"version":3,"file":"music.e3ca1ee3.js.map","sourceRoot":"/__parcel_source_root/"}